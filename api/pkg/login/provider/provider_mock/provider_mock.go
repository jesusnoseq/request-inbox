// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jesusnoseq/request-inbox/pkg/login/provider (interfaces: IProviderManager)

// Package provider_mock is a generated GoMock package.
package provider_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	provider "github.com/jesusnoseq/request-inbox/pkg/login/provider"
	model "github.com/jesusnoseq/request-inbox/pkg/model"
	oauth2 "golang.org/x/oauth2"
)

// MockIProviderManager is a mock of IProviderManager interface.
type MockIProviderManager struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderManagerMockRecorder
}

// MockIProviderManagerMockRecorder is the mock recorder for MockIProviderManager.
type MockIProviderManagerMockRecorder struct {
	mock *MockIProviderManager
}

// NewMockIProviderManager creates a new mock instance.
func NewMockIProviderManager(ctrl *gomock.Controller) *MockIProviderManager {
	mock := &MockIProviderManager{ctrl: ctrl}
	mock.recorder = &MockIProviderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProviderManager) EXPECT() *MockIProviderManagerMockRecorder {
	return m.recorder
}

// ExtractUser mocks base method.
func (m *MockIProviderManager) ExtractUser(arg0 string, arg1 *oauth2.Token, arg2 []byte) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractUser indicates an expected call of ExtractUser.
func (mr *MockIProviderManagerMockRecorder) ExtractUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUser", reflect.TypeOf((*MockIProviderManager)(nil).ExtractUser), arg0, arg1, arg2)
}

// GetOAuthConfig mocks base method.
func (m *MockIProviderManager) GetOAuthConfig(arg0 string) (provider.OAuthConfig, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthConfig", arg0)
	ret0, _ := ret[0].(provider.OAuthConfig)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOAuthConfig indicates an expected call of GetOAuthConfig.
func (mr *MockIProviderManagerMockRecorder) GetOAuthConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthConfig", reflect.TypeOf((*MockIProviderManager)(nil).GetOAuthConfig), arg0)
}
