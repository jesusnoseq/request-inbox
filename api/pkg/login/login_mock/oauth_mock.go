// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jesusnoseq/request-inbox/pkg/login (interfaces: IOauthHandler)

// Package login_mock is a generated GoMock package.
package login_mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIOauthHandler is a mock of IOauthHandler interface.
type MockIOauthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIOauthHandlerMockRecorder
}

// MockIOauthHandlerMockRecorder is the mock recorder for MockIOauthHandler.
type MockIOauthHandlerMockRecorder struct {
	mock *MockIOauthHandler
}

// NewMockIOauthHandler creates a new mock instance.
func NewMockIOauthHandler(ctrl *gomock.Controller) *MockIOauthHandler {
	mock := &MockIOauthHandler{ctrl: ctrl}
	mock.recorder = &MockIOauthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOauthHandler) EXPECT() *MockIOauthHandlerMockRecorder {
	return m.recorder
}

// HandleCallback mocks base method.
func (m *MockIOauthHandler) HandleCallback(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCallback", arg0)
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockIOauthHandlerMockRecorder) HandleCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockIOauthHandler)(nil).HandleCallback), arg0)
}

// HandleLogin mocks base method.
func (m *MockIOauthHandler) HandleLogin(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleLogin", arg0)
}

// HandleLogin indicates an expected call of HandleLogin.
func (mr *MockIOauthHandlerMockRecorder) HandleLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLogin", reflect.TypeOf((*MockIOauthHandler)(nil).HandleLogin), arg0)
}

// HandleLoginUser mocks base method.
func (m *MockIOauthHandler) HandleLoginUser(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleLoginUser", arg0)
}

// HandleLoginUser indicates an expected call of HandleLoginUser.
func (mr *MockIOauthHandlerMockRecorder) HandleLoginUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLoginUser", reflect.TypeOf((*MockIOauthHandler)(nil).HandleLoginUser), arg0)
}

// HandleLogout mocks base method.
func (m *MockIOauthHandler) HandleLogout(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleLogout", arg0)
}

// HandleLogout indicates an expected call of HandleLogout.
func (mr *MockIOauthHandlerMockRecorder) HandleLogout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLogout", reflect.TypeOf((*MockIOauthHandler)(nil).HandleLogout), arg0)
}
