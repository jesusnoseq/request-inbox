// Code generated by MockGen. DO NOT EDIT.
// Source: event_tracker.go
//
// Generated by this command:
//
//	mockgen -source=event_tracker.go -destination=event_tracker_mock/event_tracker_mock.go -package=instrumentation_mock EventTracker
//
// Package instrumentation_mock is a generated GoMock package.
package instrumentation_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	instrumentation "github.com/jesusnoseq/request-inbox/pkg/instrumentation"
)

// MockEventTracker is a mock of EventTracker interface.
type MockEventTracker struct {
	ctrl     *gomock.Controller
	recorder *MockEventTrackerMockRecorder
}

// MockEventTrackerMockRecorder is the mock recorder for MockEventTracker.
type MockEventTrackerMockRecorder struct {
	mock *MockEventTracker
}

// NewMockEventTracker creates a new mock instance.
func NewMockEventTracker(ctrl *gomock.Controller) *MockEventTracker {
	mock := &MockEventTracker{ctrl: ctrl}
	mock.recorder = &MockEventTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventTracker) EXPECT() *MockEventTrackerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventTracker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEventTrackerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventTracker)(nil).Close))
}

// Track mocks base method.
func (m *MockEventTracker) Track(ctx context.Context, event instrumentation.TrackedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Track indicates an expected call of Track.
func (mr *MockEventTrackerMockRecorder) Track(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockEventTracker)(nil).Track), ctx, event)
}
